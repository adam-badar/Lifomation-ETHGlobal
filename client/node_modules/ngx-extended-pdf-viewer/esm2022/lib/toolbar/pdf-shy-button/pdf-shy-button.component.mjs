import { Component, Input, ViewChild, effect } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./pdf-shy-button-service";
import * as i2 from "@angular/platform-browser";
import * as i3 from "../../pdf-notification-service";
import * as i4 from "@angular/common";
export class PdfShyButtonComponent {
    pdfShyButtonServiceService;
    sanitizer;
    renderer;
    notificationService;
    primaryToolbarId;
    secondaryMenuId;
    cssClass;
    eventBusName = undefined;
    l10nId;
    l10nLabel;
    title;
    toggled;
    disabled;
    order;
    action = undefined;
    closeOnClick = true;
    onlySecondaryMenu = false;
    PDFViewerApplication;
    buttonRef;
    _imageHtml;
    get imageHtml() {
        return this._imageHtml;
    }
    set image(value) {
        const svgTags = [
            // 'a' is not allowed!
            'animate',
            'animateMotion',
            'animateTransform',
            'audio',
            'canvas',
            'circle',
            'clipPath',
            'defs',
            'desc',
            'discard',
            'ellipse',
            'feBlend',
            'feColorMatrix',
            'feComponentTransfer',
            'feComposite',
            'feConvolveMatrix',
            'feDiffuseLighting',
            'feDisplacementMap',
            'feDistantLight',
            'feDropShadow',
            'feFlood',
            'feFuncA',
            'feFuncB',
            'feFuncG',
            'feFuncR',
            'feGaussianBlur',
            'feImage',
            'feMerge',
            'feMergeNode',
            'feMorphology',
            'feOffset',
            'fePointLight',
            'feSpecularLighting',
            'feSpotLight',
            'feTile',
            'feTurbulence',
            'filter',
            'foreignObject',
            'g',
            'iframe',
            'image',
            'line',
            'linearGradient',
            'marker',
            'mask',
            'metadata',
            'mpath',
            'path',
            'pattern',
            'polygon',
            'polyline',
            'radialGradient',
            'rect',
            'script',
            'set',
            'stop',
            'style',
            'svg',
            'switch',
            'symbol',
            'text',
            'textPath',
            'title',
            'tspan',
            'unknown',
            'use',
            'video',
            'view',
        ];
        // only <svg> and SVG tags are allowed
        const tags = value.split('<').filter((tag) => tag.length > 0);
        const legal = tags.every((tag) => tag.startsWith('svg') || tag.startsWith('/') || svgTags.includes(tag.split(/\s|>/)[0]));
        if (!legal) {
            throw new Error('Illegal image for PDFShyButton. Only SVG images are allowed. Please use only the tags <svg> and <path>. ' + value);
        }
        this._imageHtml = this.sanitizeHtml(value);
    }
    constructor(pdfShyButtonServiceService, sanitizer, renderer, notificationService) {
        this.pdfShyButtonServiceService = pdfShyButtonServiceService;
        this.sanitizer = sanitizer;
        this.renderer = renderer;
        this.notificationService = notificationService;
        effect(() => {
            this.PDFViewerApplication = notificationService.onPDFJSInitSignal();
            if (this.PDFViewerApplication) {
            }
            else {
                console.log('PdfRotatePageComponent.PDFViewerApplication is undefined');
            }
        });
    }
    ngAfterViewInit() {
        this.updateButtonImage();
    }
    ngOnInit() {
        this.pdfShyButtonServiceService.add(this);
    }
    ngOnChanges(changes) {
        this.pdfShyButtonServiceService.update(this);
    }
    sanitizeHtml(html) {
        return this.sanitizer.bypassSecurityTrustHtml(html); // NOSONAR
    }
    onClick(htmlEvent) {
        if (this.action) {
            this.action(htmlEvent, false);
            htmlEvent.preventDefault();
        }
        else if (this.eventBusName) {
            const PDFViewerApplication = window.PDFViewerApplication;
            PDFViewerApplication.eventBus.dispatch(this.eventBusName);
            htmlEvent.preventDefault();
        }
    }
    updateButtonImage() {
        if (this.buttonRef) {
            const el = this.buttonRef.nativeElement;
            if (this._imageHtml) {
                const temp = this.renderer.createElement('div');
                temp.innerHTML = this._imageHtml;
                const image = temp.children[0];
                if (!el.innerHTML.includes(image.innerHTML)) {
                    // if using SSR, the HTML code may already be there
                    this.renderer.appendChild(el, image);
                }
            }
            else {
                const childNodes = el.childNodes;
                for (let child of childNodes) {
                    this.renderer.removeChild(el, child);
                }
            }
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.11", ngImport: i0, type: PdfShyButtonComponent, deps: [{ token: i1.PdfShyButtonService }, { token: i2.DomSanitizer }, { token: i0.Renderer2 }, { token: i3.PDFNotificationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.11", type: PdfShyButtonComponent, selector: "pdf-shy-button", inputs: { primaryToolbarId: "primaryToolbarId", secondaryMenuId: "secondaryMenuId", cssClass: "cssClass", eventBusName: "eventBusName", l10nId: "l10nId", l10nLabel: "l10nLabel", title: "title", toggled: "toggled", disabled: "disabled", order: "order", action: "action", closeOnClick: "closeOnClick", onlySecondaryMenu: "onlySecondaryMenu", image: "image" }, viewQueries: [{ propertyName: "buttonRef", first: true, predicate: ["buttonRef"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<button\n  *ngIf=\"!onlySecondaryMenu\"\n  type=\"button\"\n  [id]=\"primaryToolbarId\"\n  class=\"toolbarButton\"\n  [class]=\"cssClass\"\n  [title]=\"title\"\n  [attr.data-l10n-id]=\"l10nId\"\n  [class.toggled]=\"toggled\"\n  [disabled]=\"disabled\"\n  (click)=\"onClick($event)\"\n  [attr.aria-label]=\"title\"\n  role=\"button\"\n  #buttonRef\n></button>\n", dependencies: [{ kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.11", ngImport: i0, type: PdfShyButtonComponent, decorators: [{
            type: Component,
            args: [{ selector: 'pdf-shy-button', template: "<button\n  *ngIf=\"!onlySecondaryMenu\"\n  type=\"button\"\n  [id]=\"primaryToolbarId\"\n  class=\"toolbarButton\"\n  [class]=\"cssClass\"\n  [title]=\"title\"\n  [attr.data-l10n-id]=\"l10nId\"\n  [class.toggled]=\"toggled\"\n  [disabled]=\"disabled\"\n  (click)=\"onClick($event)\"\n  [attr.aria-label]=\"title\"\n  role=\"button\"\n  #buttonRef\n></button>\n" }]
        }], ctorParameters: () => [{ type: i1.PdfShyButtonService }, { type: i2.DomSanitizer }, { type: i0.Renderer2 }, { type: i3.PDFNotificationService }], propDecorators: { primaryToolbarId: [{
                type: Input
            }], secondaryMenuId: [{
                type: Input
            }], cssClass: [{
                type: Input
            }], eventBusName: [{
                type: Input
            }], l10nId: [{
                type: Input
            }], l10nLabel: [{
                type: Input
            }], title: [{
                type: Input
            }], toggled: [{
                type: Input
            }], disabled: [{
                type: Input
            }], order: [{
                type: Input
            }], action: [{
                type: Input
            }], closeOnClick: [{
                type: Input
            }], onlySecondaryMenu: [{
                type: Input
            }], buttonRef: [{
                type: ViewChild,
                args: ['buttonRef', { static: false }]
            }], image: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,