import { OnDestroy } from '@angular/core';
import { Subject } from 'rxjs';
import { IPDFViewerApplication } from './options/pdf-viewer-application';
import { IPDFViewerApplicationOptions } from './options/pdf-viewer-application-options';
import { PdfCspPolicyService } from './pdf-csp-policy.service';
import * as i0 from "@angular/core";
export declare class PDFScriptLoaderService implements OnDestroy {
    private pdfCspPolicyService;
    forceUsingLegacyES5: boolean;
    /** Use the minified (minifiedJSLibraries="true", which is the default) or the user-readable pdf.js library (minifiedJSLibraries="false") */
    private _minifiedJSLibraries;
    get minifiedJSLibraries(): boolean;
    set minifiedJSLibraries(value: boolean);
    onPDFJSInitSignal: import("@angular/core").WritableSignal<IPDFViewerApplication>;
    onPDFJSInit: Subject<void>;
    pdfjsVersion: string;
    shuttingDown: boolean;
    private _needsES5;
    PDFViewerApplication: IPDFViewerApplication;
    PDFViewerApplicationOptions: IPDFViewerApplicationOptions;
    private PDFViewerApplicationConstants;
    webViewerLoad: () => void;
    private originalPrint;
    ngxExtendedPdfViewerIncompletelyInitialized: boolean;
    constructor(pdfCspPolicyService: PdfCspPolicyService);
    private addScriptOpChainingSupport;
    private loadCoreLibrary;
    private createScriptElement;
    private createScriptImportElement;
    private getPdfJsPath;
    private loadViewer;
    private addFeatures;
    ensurePdfJsHasBeenLoaded(): Promise<boolean>;
    ngOnDestroy(): void;
    replaceBrowserPrint(useCustomPrintOfPdfJS: boolean): void;
    private iOSVersionRequiresES5;
    private needsES5;
    private ngxExtendedPdfViewerCanRunModernJSCode;
    static ɵfac: i0.ɵɵFactoryDeclaration<PDFScriptLoaderService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PDFScriptLoaderService>;
}
